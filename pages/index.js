import Head from 'next/head'
import { useCallback, useEffect, useState } from 'react'
import Image from 'next/image'
import { FaChessQueen } from 'react-icons/fa'

import { executeHillClimbing } from '../utils'

const initialState = [
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
  [false, false, false, false, false, false, false, false],
]

const styleBoard = {
  width: '100vw',
  height: '100vh',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  flexDirection: 'column',
}

const styleBlock = {
  width: '80px',
  height: '80px',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  border: '1px solid #000',
}

export default function Home() {
  const [board, setBoard] = useState([])
  const [attacks, setAttacks] = useState([])
  const [message, setMessage] = useState('')

  function reset() {
    setBoard(randomState())
    setAttacks([])
    setMessage('')
  }

  function resolver() {
    const { finalBoard, nSteps, attacks } = executeHillClimbing(board)
    if (nSteps >= 100) {
      setAttacks(attacks)
      setBoard(finalBoard)
      setMessage(`could not solve in ${nSteps} steps, total attacks ${attacks.length / 2}`)
      return
    }
    setMessage(`Success solve in ${nSteps} steps`)
    setBoard(finalBoard)
  }

  const randomState = useCallback(() => {
    const newState = initialState.map((arr) => arr.slice())
    for (let i = 0; i < initialState.length; i++) {
      const queenIndex = getRandomInt(0, 7)
      newState[i][queenIndex] = true
    }
    return newState
  }, [])

  function getRandomInt(min, max) {
    min = Math.ceil(min)
    max = Math.floor(max)
    return Math.floor(Math.random() * (max - min)) + min
  }

  useEffect(() => {
    setBoard(randomState())
  }, [randomState])

  return (
    <div>
      <Head>
        <title>N queens - Hill climbing</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main style={styleBoard}>
        {board.map((arr, idx) => {
          return (
            <div key={idx} style={{ display: 'flex' }}>
              {arr.map((value, idy) => {
                const isOdd = (idx + idy) % 2 === 1
                const isAttack = !!attacks.find(([x, y]) => x === idx && y === idy)

                if (value) {
                  return (
                    <div
                      key={idy}
                      style={{ ...styleBlock, backgroundColor: isAttack ? 'red' : isOdd ? 'lightgray' : '#fff' }}
                    >
                      <FaChessQueen size={20} />
                    </div>
                  )
                }
                return (
                  <div
                    key={idy}
                    style={{ ...styleBlock, backgroundColor: isAttack ? 'red' : isOdd ? 'lightgray' : '#fff' }}
                  />
                )
              })}
            </div>
          )
        })}

        <span>{message}</span>

        <button
          onClick={resolver}
          style={{
            height: '2rem',
            width: '250px',
            margin: '20px 0',
            outline: 'none',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontWeight: 'bold',
            fontSize: '15px',
          }}
        >
          Resolver
        </button>
        <button
          onClick={reset}
          style={{
            height: '2rem',
            width: '250px',
            outline: 'none',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontWeight: 'bold',
            fontSize: '15px',
          }}
        >
          Reset
        </button>
      </main>
    </div>
  )
}
